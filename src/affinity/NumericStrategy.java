package affinity;

import utils.RNG;

public class NumericStrategy extends AffinityStrategy {
	private int rift, nexus;
	public static final int MIN = 0, MAX = 19;
	
	/**
	 * Initializes a numeric strategy based on provided {@link AFFINITY} numbers.
	 * @param rift The rift affinity
	 * @param nexus The nexus affinity
	 */
	public NumericStrategy(int rift, int nexus) {
		if (rift < MIN || rift > MAX)
			throw new IllegalArgumentException("Rift must be in range [" + MIN + ", " + MAX + "], but was " + rift + ".");
		
		if (nexus < MIN || nexus > MAX)
			throw new IllegalArgumentException("Nexus must be in range [" + MIN + ", " + MAX + "], but was " + nexus + ".");
		
		if (nexus + rift != MAX)
			throw new IllegalArgumentException("Nexus and rift must total" + MAX + ", but were " + (nexus + rift) + ".");
		
		this.rift = rift;
		this.nexus = nexus;
	}
	
	/**
	 * Initializes a numeric strategy based on a given number.
	 * @param random The number along a rift - nexus spectrum.
	 */
	public NumericStrategy(int random) {
		this(random, MAX - random);
	}
	
	/**
	 * Initializes a numeric strategy based on a random int generated by {@link utils.RNG#getRandom()} from {@link #MIN} to {@link #MAX}, inclusive.
	 */
	public NumericStrategy() { 
		this(RNG.getRandom().nextInt(MAX + 1));
	}
	
	@Override
	public int getAffinity(AFFINITY type) {
		if (type == AFFINITY.NEXUS)
			return nexus;
		else if (type == AFFINITY.RIFT)
			return rift;
		else
			return 0;
	}
	
	
	
	
}
